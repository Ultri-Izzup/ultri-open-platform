# nginx.conf  --  docker-openresty
#
# This file is installed to:
#   `/usr/local/openresty/nginx/conf/nginx.conf`
# and is the file loaded by nginx at startup,
# unless the user specifies otherwise.
#
# It tracks the upstream OpenResty's `nginx.conf`, but removes the `server`
# section and adds this directive:
#     `include /etc/nginx/conf.d/*.conf;`
#
# The `docker-openresty` file `nginx.vh.default.conf` is copied to
# `/etc/nginx/conf.d/default.conf`.  It contains the `server section
# of the upstream `nginx.conf`.
#
# See https://github.com/openresty/docker-openresty/blob/master/README.md#nginx-config-files
#

# Used for caching auto-SSL certs
env REDIS_HOST; 

#user  nobody;
#worker_processes 1;

# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    # Enables or disables the use of underscores in client request header fields.
    # When the use of underscores is disabled, request header fields whose names contain underscores are marked as invalid and become subject to the ignore_invalid_headers directive.
    # underscores_in_headers off;

    # Log in JSON Format
    #log_format nginxlog_json escape=json '{ "timestamp": "$time_iso8601", '
    #    '"remote_addr": "$remote_addr", '
    #    '"body_bytes_sent": $body_bytes_sent, '
    #    '"request_time": $request_time, '
    #    '"response_status": $status, '
    #    '"request": "$request", '
    #    '"request_method": "$request_method", '
    #    '"host": "$host",'
    #    '"upstream_addr": "$upstream_addr",'
    #    '"http_x_forwarded_for": "$http_x_forwarded_for",'
    #    '"http_referrer": "$http_referer", '
    #    '"http_user_agent": "$http_user_agent", '
    #    '"http_version": "$server_protocol", '
    #    '"nginx_access": true }';
    #access_log /dev/stdout nginxlog_json;

    # See Move default writable paths to a dedicated directory (#119)
    # https://github.com/openresty/docker-openresty/issues/119
    client_body_temp_path /var/run/openresty/nginx-client-body;
    proxy_temp_path       /var/run/openresty/nginx-proxy;
    fastcgi_temp_path     /var/run/openresty/nginx-fastcgi;
    uwsgi_temp_path       /var/run/openresty/nginx-uwsgi;
    scgi_temp_path        /var/run/openresty/nginx-scgi;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    include /etc/nginx/conf.d/*.conf;


    # Automatic SSL Cert generation
    resolver 8.8.8.8 ipv6=off;

    lua_shared_dict acme 16m;

    # required to verify Let's Encrypt API
    lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
    lua_ssl_verify_depth 2;

    init_by_lua_block {
        require("resty.acme.autossl").init({
            -- setting the following to true
            -- implies that you read and accepted https://letsencrypt.org/repository/
            tos_accepted = true,
            -- uncomment following for first time setup
            -- staging = true,
            -- uncomment following to enable RSA + ECC double cert
            -- domain_key_types = { 'rsa', 'ecc' },
            -- uncomment following to enable tls-alpn-01 challenge
            -- enabled_challenge_handlers = { 'http-01', 'tls-alpn-01' },
            account_key_path = "/etc/openresty/account.key",
            account_email = "billing@ultri.com",
            domain_whitelist = { "izzup.com", "service.ultri.com","service.izzup.com", "ultri.com" },
            -- interval to wait before retrying after failed certificate request
            failure_cooloff = 300,
            -- the threshold to renew a cert before it expires, in seconds
            renew_threshold = 7 * 86400,
            -- interval to check cert renewal, in seconds
            renew_check_interval = 6 * 3600,
            -- the store certificates
            storage_adapter = "redis",
            -- the storage config passed to storage adapter
            storage_config = {
                host = os.getenv("REDIS_HOST"),
                port = 6379,
                database = 0,
                -- Redis authentication key
                auth = nil,
                ssl = false,
                ssl_verify = false,
                ssl_server_name = nil,
            },
        })
    }

    init_worker_by_lua_block {
        require("resty.acme.autossl").init_worker()
    }

    upstream ultri-api {
        server api:3000;
    }

    server {
        listen 80;
        listen 443 ssl;
        server_name .service.ultri.com .service.izzup.com .service.izzup.local .service.ultri.local;

        # fallback certs, make sure to create them before hand
        ssl_certificate /etc/openresty/default.pem;
        ssl_certificate_key /etc/openresty/default.key;

        root /usr/local/openresty/nginx/html;

        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-XSS-Protection "1; mode=block";
        add_header X-Content-Type-Options "nosniff";

        index index.html;

        charset utf-8;

        ssl_certificate_by_lua_block {
            require("resty.acme.autossl").ssl_certificate()
        }

        location /.well-known {
            content_by_lua_block {
                require("resty.acme.autossl").serve_http_challenge()
            }
        }

        location /api/ {
            # more info: https://nginx.org/en/docs/http/ngx_http_proxy_module.html
            proxy_http_version 1.1;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # This is the directive that proxies requests to the specified server.
            # If you are using an upstream group, then you do not need to specify a port.
            # If you are directly proxying to a server e.g.
            # proxy_pass http://127.0.0.1:3000 then specify a port.
            proxy_pass http://ultri-api/;
        }

        location / {
            try_files $uri $uri/ /index.html;
        }

        location = /robots.txt  { access_log off; log_not_found off; }

        location ~ /\.(?!well-known).* {
            deny all;
        }
    }

    upstream auth-api {
        server authentic8:9000;
    }

    server {
        listen 80;
        listen 443 ssl;
        server_name .auth.ultri.com .auth.izzup.com .auth.izzup.local auth.ultri.local .auth.ultri.local;

        # fallback certs, make sure to create them before hand
        ssl_certificate /etc/openresty/default.pem;
        ssl_certificate_key /etc/openresty/default.key;

        root /usr/local/openresty/nginx/html;

        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-XSS-Protection "1; mode=block";
        add_header X-Content-Type-Options "nosniff";

        index index.html;

        charset utf-8;

        ssl_certificate_by_lua_block {
            require("resty.acme.autossl").ssl_certificate()
        }

        location /.well-known {
            content_by_lua_block {
                require("resty.acme.autossl").serve_http_challenge()
            }
        }

        location / {
            # more info: https://nginx.org/en/docs/http/ngx_http_proxy_module.html
            proxy_http_version 1.1;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # This is the directive that proxies requests to the specified server.
            # If you are using an upstream group, then you do not need to specify a port.
            # If you are directly proxying to a server e.g.
            # proxy_pass http://127.0.0.1:3000 then specify a port.
            proxy_pass http://auth-api/;
        }

        location = /robots.txt  { access_log off; log_not_found off; }

        location ~ /\.(?!well-known).* {
            deny all;
        }
    }

}