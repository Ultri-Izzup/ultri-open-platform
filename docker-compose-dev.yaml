services:
  postgres:
    container_name: open-platform-postgres
    hostname: "postgres"
    image: "postgres:14"
    healthcheck:
      test: ["CMD", "pg_isready", "-q", "-d", "ultri", "-U", "postgres"]
      timeout: 45s
      interval: 10s
      retries: 10
    ports:
      - "5432:5432"
    restart: always
    env_file: .env
    networks:
      - ultri-net
    volumes:
      - postgres-data:/var/lib/postgres/data
      - ./postgres:/docker-entrypoint-initdb.d/

  redis:
    image: redis:7.0.7
    container_name: open-platform-redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - ultri-net
    # command: redis-server --save 20 1 --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
    command: redis-server --save 20 1 --loglevel warning
    volumes:
      - redis:/data
      
  gateway:
    image: ultri/open-platform-gateway:latest
    container_name: ultri-gateway
    restart: on-failure
    ports:
      - "80:80"
      - "443:443"
    env_file: ".env"
    networks:
      - ultri-net
    volumes:
      - "./gateway/config/nginx.conf:/usr/local/openresty/nginx/conf/nginx.conf"
      - "./gateway/config/account.key:/etc/openresty/account.key"
      - "./gateway/certs/default-service.key:/etc/openresty/default.key"
      - "./gateway/certs/default-service.pem:/etc/openresty/default.pem"
      - "./gateway/html:/usr/local/openresty/nginx/html"
      - "./logs/gateway:/usr/local/openresty/nginx/logs"
    depends_on:
      - redis

  api:
    image: ultri/open-platform-api:latest
    container_name: ultri-api
    ports:
      - "3500:3000"
    env_file: ".env"
    networks:
      - ultri-net
    volumes:
      - "./api/config:/usr/src/api/config"
      - "./api/plugins:/usr/src/api/plugins"
      - "./api/routes:/usr/src/api/routes"
      - "./api/services:/usr/src/api/services"
      - "./api/app.js:/usr/src/api/app.js"
    depends_on:
      - redis
      - postgres

  authentic8:
    image: ultri/authentic8
    restart: unless-stopped
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgres
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    volumes:
      - ./auth/media:/media
      - ./auth/custom-templates:/templates
    env_file:
      - .env
    ports:
      - "${AUTHENTIK_PORT_HTTP:-9000}:9000"
      - "${AUTHENTIK_PORT_HTTPS:-9443}:9443"
    networks:
      - ultri-net
  worker:
    image: ultri/authentic8
    restart: unless-stopped
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgres
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./auth/media:/media
      - ./auth/certs:/certs
      - ./auth/custom-templates:/templates
    env_file:
      - .env
    networks:
      - ultri-net


volumes:
  # smtp4dev-data: {}
  postgres-data: {}
  redis: {}

networks:
  ultri-net:
    external: false
